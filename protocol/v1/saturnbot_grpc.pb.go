// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protocol/v1/saturnbot.proto

package protocolv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginService_ExecuteActions_FullMethodName = "/protocol.v1.PluginService/ExecuteActions"
	PluginService_ExecuteFilters_FullMethodName = "/protocol.v1.PluginService/ExecuteFilters"
	PluginService_GetPlugin_FullMethodName      = "/protocol.v1.PluginService/GetPlugin"
	PluginService_OnPrClosed_FullMethodName     = "/protocol.v1.PluginService/OnPrClosed"
	PluginService_OnPrCreated_FullMethodName    = "/protocol.v1.PluginService/OnPrCreated"
	PluginService_OnPrMerged_FullMethodName     = "/protocol.v1.PluginService/OnPrMerged"
	PluginService_Shutdown_FullMethodName       = "/protocol.v1.PluginService/Shutdown"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	ExecuteActions(ctx context.Context, in *ExecuteActionsRequest, opts ...grpc.CallOption) (*ExecuteActionsResponse, error)
	ExecuteFilters(ctx context.Context, in *ExecuteFiltersRequest, opts ...grpc.CallOption) (*ExecuteFiltersResponse, error)
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error)
	OnPrClosed(ctx context.Context, in *OnPrClosedRequest, opts ...grpc.CallOption) (*OnPrClosedResponse, error)
	OnPrCreated(ctx context.Context, in *OnPrCreatedRequest, opts ...grpc.CallOption) (*OnPrCreatedResponse, error)
	OnPrMerged(ctx context.Context, in *OnPrMergedRequest, opts ...grpc.CallOption) (*OnPrMergedResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) ExecuteActions(ctx context.Context, in *ExecuteActionsRequest, opts ...grpc.CallOption) (*ExecuteActionsResponse, error) {
	out := new(ExecuteActionsResponse)
	err := c.cc.Invoke(ctx, PluginService_ExecuteActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ExecuteFilters(ctx context.Context, in *ExecuteFiltersRequest, opts ...grpc.CallOption) (*ExecuteFiltersResponse, error) {
	out := new(ExecuteFiltersResponse)
	err := c.cc.Invoke(ctx, PluginService_ExecuteFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error) {
	out := new(GetPluginResponse)
	err := c.cc.Invoke(ctx, PluginService_GetPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) OnPrClosed(ctx context.Context, in *OnPrClosedRequest, opts ...grpc.CallOption) (*OnPrClosedResponse, error) {
	out := new(OnPrClosedResponse)
	err := c.cc.Invoke(ctx, PluginService_OnPrClosed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) OnPrCreated(ctx context.Context, in *OnPrCreatedRequest, opts ...grpc.CallOption) (*OnPrCreatedResponse, error) {
	out := new(OnPrCreatedResponse)
	err := c.cc.Invoke(ctx, PluginService_OnPrCreated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) OnPrMerged(ctx context.Context, in *OnPrMergedRequest, opts ...grpc.CallOption) (*OnPrMergedResponse, error) {
	out := new(OnPrMergedResponse)
	err := c.cc.Invoke(ctx, PluginService_OnPrMerged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, PluginService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	ExecuteActions(context.Context, *ExecuteActionsRequest) (*ExecuteActionsResponse, error)
	ExecuteFilters(context.Context, *ExecuteFiltersRequest) (*ExecuteFiltersResponse, error)
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)
	OnPrClosed(context.Context, *OnPrClosedRequest) (*OnPrClosedResponse, error)
	OnPrCreated(context.Context, *OnPrCreatedRequest) (*OnPrCreatedResponse, error)
	OnPrMerged(context.Context, *OnPrMergedRequest) (*OnPrMergedResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) ExecuteActions(context.Context, *ExecuteActionsRequest) (*ExecuteActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteActions not implemented")
}
func (UnimplementedPluginServiceServer) ExecuteFilters(context.Context, *ExecuteFiltersRequest) (*ExecuteFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFilters not implemented")
}
func (UnimplementedPluginServiceServer) GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedPluginServiceServer) OnPrClosed(context.Context, *OnPrClosedRequest) (*OnPrClosedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPrClosed not implemented")
}
func (UnimplementedPluginServiceServer) OnPrCreated(context.Context, *OnPrCreatedRequest) (*OnPrCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPrCreated not implemented")
}
func (UnimplementedPluginServiceServer) OnPrMerged(context.Context, *OnPrMergedRequest) (*OnPrMergedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPrMerged not implemented")
}
func (UnimplementedPluginServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_ExecuteActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ExecuteActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ExecuteActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ExecuteActions(ctx, req.(*ExecuteActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ExecuteFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ExecuteFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ExecuteFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ExecuteFilters(ctx, req.(*ExecuteFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_GetPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPlugin(ctx, req.(*GetPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_OnPrClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnPrClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).OnPrClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_OnPrClosed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).OnPrClosed(ctx, req.(*OnPrClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_OnPrCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnPrCreatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).OnPrCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_OnPrCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).OnPrCreated(ctx, req.(*OnPrCreatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_OnPrMerged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnPrMergedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).OnPrMerged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_OnPrMerged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).OnPrMerged(ctx, req.(*OnPrMergedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.v1.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteActions",
			Handler:    _PluginService_ExecuteActions_Handler,
		},
		{
			MethodName: "ExecuteFilters",
			Handler:    _PluginService_ExecuteFilters_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _PluginService_GetPlugin_Handler,
		},
		{
			MethodName: "OnPrClosed",
			Handler:    _PluginService_OnPrClosed_Handler,
		},
		{
			MethodName: "OnPrCreated",
			Handler:    _PluginService_OnPrCreated_Handler,
		},
		{
			MethodName: "OnPrMerged",
			Handler:    _PluginService_OnPrMerged_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _PluginService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/v1/saturnbot.proto",
}
